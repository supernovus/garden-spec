import "common" :export

content () {{
<p>
So, in the Importation section we introduced you to the
<code class="b">import</code> statement, and mentioned that it has a
<i class="f">:export</i> flag. Now we're going to cover how exporting
works, and how it can enable several object-oriented style methodologies
to your templates.
</p>
<p>
When you import the objects from one namespace into another, there is one
very important thing to remember: 
local rules override global ones. In other words, if you import
a <i class="n">common</i> namespace with a <i class="t">Page</i> template,
but then you define a <i class="t">Page</i> template in the local namespace,
the local template overrides the global one. 
</p>
<p>
The second thing that is important to note: normal importation is one way.
You import the templates from an external namespace into your local
namespace. The external namespace does not have access to any templates
in your local namespace.
</p>
<p>
What this means on a practical note is that if you do override the
<i class="t">Page</i> template, it will be used in your local namespace
whenever you make a `callPage()` call.
However, any imported templates from <i class="n">common</i> that make
a `callPage()` call, will be referring to the <i class="t">Page</i> template
within the <i class="n">common</i> namespace.
</p>
<p>
So, what if you want to override the version of <i class="t">Page</i> from
<i class="n">common</i> with the local version? Easy, add the
<i class="f">:export</i> flag to your <code class="b">import</code> statement.
</p>
<p>
All of the templates and dictionaries defined in your local class will be
exported to any namespaces that were imported using the 
<i class="f">:export</i> flag.
</p>
<p class="note">
Currently there is no way to specify which templates or dictionaries you
want exported, or to which namespaces. Any namespace that was imported using
the <i class="f">:export</i> flag will have <strong>all</strong> of the
local templates and dictionaries exported to it, overriding the versions
in the original namespace. More flexibility is being added in Version 2.
</p>
<p>
This is a powerful (and potentially dangerous) feature, allowing for a
great deal of flexibility in your template design. Because there are many
usage patterns for this, a few additional statements are available to
specify how your namespace handles exportation requests.
</p>
<h4>Requiring exportation</h4>
<p>
If your namespace requires templates and/or dictionaries from another
namespace in order to work (this could be useful to build a Role-like
template, which calls other templates not defined in the role class) you
can use the <code class="b">require export</code> statement in your
namespace. This namespace will refuse to be imported without the
<i class="f">export</i> flag in use.
</p>
<h4>Disallowing exportation</h4>
<p>
If your namespace is meant to be final, and you want to ensure that no
other namespace overrides its templates or dictionaries, you can specify
the <code class="b">no export</code> statement. When used, it will cause
a fatal error if an attempt to import it using the <i class="f">:export</i> 
flag is made.
</p>
}}

callPage () {{ <code>`ss()`<i class="t">Page()</i>`es()`</code> }}
