import "common" :export

content () {{
<p>
There are several ideas I have planned for future versions of Garden.
Some of them may show up sooner than others. Many require further research and
planning before they are even ready to write a spec for, let alone implement.
Implementations may choose to implement some of them as implementation specific
extensions, just taking into account that a future Garden spec will probably
make an <em>official</em> way of doing them.
</p>

<h4>Dynamic statements via Globals</h4>
<p>
Basically the idea behind this is, to make the `stmt(import)` and
`stmt(include)` statements more flexible by allowing them to use global
variables as their values. So a template could do something like:
</p>
<code class="block">
<b>version 2</b>
<b>use globals</b>
<b>global</b> `var(usersettings)`
<b>include</b> <i class="v">usersettings.langdir</i>
<b>import</b> <i class="v">usersettings.language</i>
</code>
<p>
As this depends on the Globals extension, it would only be enabled
if you have enabled that extension (if that wasn't obvious.)
</p>
<p>
This will definitely make it into Version 2.
</p>

<h4>Block Options</h4>
<p>
The ability to set options on blocks would allow several
other abilities to be easier to implement. I'm not sure what form this would
take, but (for the sake of a mockup) imagine:
</p>
<code class="block">
`tmpl(myTemplate) (`var(myvar)`) <i class="f">:export</i>(`var(def)`) <i class="f">:oneline</i> `st()`
Blah blah blah
`es()`
</code>
<p>
So in our example above, the <i class="f">:export</i> 
flag (with a `var(def)` parameter) and the
<i class="f">:oneline</i> flag, would be added to the block options.
Block options would be able to be used by other core features and extensions
for various purposes (see below for some examples.)
</p>
<p>This will definitely make it into Version 2</p>

<h4>Whitespace rules for template blocks</h4>
<p>
Currently there are two forms of template blocks. One that preserves all
whitespace, and one that cuts leading and following whitespace out. The only
thing is, to use the latter one, you have to have the entire template 
definition on a single line. Wouldn't it be nice if you could specify a longer
template snippet, that you really want on one line in the finished results,
on one line?
</p>
<p>
Inspired by StringTemplate (one of the two major inspirations for Garden in the
first place), an option to make this possible, as well as a few other options
for whitespace handling, are planned to be implemented using the Block options.
</p>
<p>
This will definitely make it into Version 2</p>
</p>

<h4>Referencing of external dictionaries</h4>
<p>
Currently you can reference external templates by using the namespace
prefix. This does not work with dictionaries. This should be rectified.
</p>
<p>
This is very likely to make it into Version 2.
</p>

<h4>Flexible export rules</h4>
<p>
Currently the Exportation is very much an all-or-nothing approach.
Basically, the general idea of this would be to make it so that you could
subscribe to certain exports.
</p>
<p>
For backwards compatibility and simplicity, existing `stmt(import)`
statements using the <i class="f">:export</i> flag would work the same as
they do now (all templates and dictionaries would be exported, overriding
versions that are the same.)
</p>
<p>
In the new version though, you could specify an export group in the
`stmt(import)` statement, and only templates and/or dictionaries with a
<i class="f">:export</i> block option matching the export group would
be exported to that namespace. The exact details aren't worked out yet,
but it would add a great deal more flexibility to what gets exported.
</p>
<p>
On the flip side, adding a <i class="f">:noreplace</i> block option to a
block would make it so that it could not be overridden with an exported
version (and any attempt to do so would result in a failure message.)
</p>
<p>
Some form of this is likely to make it into Version 2.
</p>

<h4>In-template Array Creation</h4>
<p>
Another feature inspired by StringTemplate. The ability to create arrays
within template definitions themselves. Not sure what form it will take yet.
</p>
<p>
Some form of this is likely to make it into Version 2.
</p>

<h4>Parsed Blocks</h4>
<p>
Another feature using block options, these would look similar to dictionary
blocks, except that their contents would be passed to a Plugin to be parsed.
</p>
<p>
You would need to enable the plugins extension, load an appropriate plugin,
and set the block option on the block to parse. The usefulness of this is
still in question.
</p>
<p>
Some form of this will likely make it into a future version.
</p>

<h4>Anonymous templates</h4>
<p>
Currently, in recusive template calls and conditional template calls, you
need to specify a template name to call. StringTemplate offers the ability
to create one-off anonymous templates that can be used instead.
</p>
<p>
This may be useful, but personally I'm not sure how much so, and if it's worth
the extra parsing power that would be required to do it.
</p>
<p>
This may show up in a future version, as either a core feature or an
extension. It may have to be a core feature, due to it requiring a grammar
modification. This is definitely an undecided idea.
</p>

}}

