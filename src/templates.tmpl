import "common" :export

content () {{
<p>
At the heart of any template engine, is the templates themselves.
Many template engines require that you have a single monolithic template
for each page or section of your application. 
One of the core concepts of Garden is instead using modular template
components to build your full templates. Not only does Garden support
nested templates, it relies on them for several aspects of the design itself
such as recursion and conditional sections.
</p>
<p>
In your namespace, you will likely have several template blocks, each
representing a "piece" of the template. In namespaces meant to represent
a single template, you should have a default template, with the same name
as the namespace itself. The other templates can be called from one another
easily.
</p>
<p>
If you have common components that are used in many different pages, you
can build a namespace to contain them, and call them from your other
templates (either by using the full namespace prefix, or by importing
the namespace.)
</p>

<h4>Template Block</h4>
<p>
A template block is defined using the following syntax:
</p>
<code class="block">
<i class="t">nameOfTemplate</i> (<i class="v">the</i>, <i class="v">parameters</i>, <i class="v">you</i>, <i class="v">require</i>) `st()`
The content of the template.
`et()`
</code>
<p>
Everything past the `st()` symbol is the content of your template.
It will be parsed for template statements (see the Template Language chapter.)
The `et()` symbol marks the end of the template block.
</p>
`custTwo(start=syntax.st, end=syntax.et)`
<p>
If the template block is on a single line, the whitespace at the beginning
and end of the block will be ignored, and no newline character will be put
at the end. Otherwise, it is assumed that all whitespace is to be preserved
"as is", including the newline at the end of the block.
</p>
<code class="block">
<i class="t">snippetBlock</i> () `st()` Hello World `et()`
</code>

<h4>Template Object</h4>
<p>
The Garden object's <code>get()</code> method should return an object
representing the template. This should have a <code>render()</code> method 
(or something similar) which you can pass the parameters in with. 
The parameters are all
named, so in the <i class="t">nameOfTemplate</i> example above, the
parameters you would need to pass
<code>the</code>,
<code>parameters</code>
<code>you</code>
<code>require</code>
as named parameters to the template's <code>render()</code> method.
</p>
<p>
All of the parameters in the signature must be passed to the template,
even if its value is undefined or false.
</p>
}}

