import "common" :export

content () {{
<p>
A core principle in Garden is to split up templates into modular sections.
Instead of having one large monolithic template, it's easier to make little
template snippets, and compose them together into your desired template.
</p>
<p>
The template snippets can be used in a few ways. Here we're going to describe
how to make direct calls to those templates.
</p>
<h4>A template with no parameters</h4>
<p>
You may have little common snippets that take no parameters, if that is
the case, you can call the template very easily:
</p>
<code class="block">
`ss()`<i class="t">templateName</i>()`es()`
</code>
<h4>A template with parameters</h4>
<p>
However, more often than not, templates have parameters, and you need
to be able to specify those parameters in the template you are calling.
To do this, we specify the parameters in the template call signature.
</p>
<code class="block">
  <i class="t">firstTemplate</i> (<i class="v">company</i>, <i class="v">user</i>) `st()`
  Here we will call another template: `ss()`<i class="t">secondTemplate</i>(<i class="v">company</i>, <i class="v">name</i>=<i class="v">user.name</i>)`es()`
  `et()`
  <i class="t">secondTemplate</i> (<i class="v">company</i>, <i class="v">name</i>) `st()`
  Yes, `ss()`<i class="v">name</i>`es()` works for `ss()`<i class="v">company</i>`es()`.
  `et()`
</code>
<p>
Here our <i class="t">firstTemplate</i> is making a call to
<i class="t">secondTemplate</i>, passing the <i class="v">company</i>
variable through directly and passing the <i class="v">user.name</i>
variable through as <i class="v">name</i> which is what 
<i class="t">secondTemplate</i> is looking for.
</p>
<p>
Using named parameters when possible is recommended. If you don't use named
parameters, then how what you pass is determined to be a parameter will
depend on context. If you pass a variable with the same name as a parameter
in the template you are calling, it will be assumed to be that parameter,
regardless of order. If it isn't, it will be assumed to be a positional
parameter. This can be used with literals to create easy template sections.
For instance:
</p>
<code class="block">
`tmpl(myTemplate)` (`var(name)`) `st()`
Yeah, so `ss()`name`es()` said: `ss()`b(Hello)`es()`
`et()`

`tmpl(b)` (`var(text)`) `st()` &lt;strong&gt;`ss()`text`es()`&lt;/strong&gt; `et()`

`sc()` <tt>Given a name of Bob, will result in:
   Yeah, so Bob said: &lt;strong&gt;Hello&lt;/strong&gt;</tt> `ec()`
</code>
<p class="note">
Using literal text as parameters rather than variables, has several
limitations, and does not handle text with spaces in it. 
The use of dictionaries is recommended instead of literal text.
</p>
}}

