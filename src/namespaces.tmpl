import "common" :export :syntax

content () {{
<p>
In Garden, all templates, dictionaries, or localized settings are contained
in a namespace. Typically, each namespace is represented by a single file in 
a folder. The global Garden object can be given a list of folders to search 
for namespace files in. Individual namespaces can add additional folders to 
their search path. The search folders can use sub-folders to break up 
the namespaces better.
</p>
<p>
In the examples below, except where stated otherwise, it is assumed we have
a single search path, considing of the <i>./templates</i> folder.
</p>
<p>
The Garden object should have a <code>get()</code> method which returns a 
template to the application. 
Template names can be simple strings such as <i class="t">example</i>, 
or nested names such as <i class="t">common/example/mytemplate</i> 
When you call the <code>get()</code> method, or call a template from inside 
another template, you are always referring to the 
<em class="t">template</em> you want, not the <em class="n">namespace</em>
(although as the following will show, that can sometimes be the same name.)
</p>
<h4>Default Template</h4>
<p>
A namespace can have a default template. That is, a template with the same
name as the namespace itself. So for instance, if you have a namespace file
called <i class="n">./templates/example.tmpl</i> you could make a template 
within that  file called <i class="t">example</i> which would then be used 
as the default template. 
Thus from any other namespace, calling 
<code>`ss()`<i class="t">example()</i>`es()`</code> would find 
the  <i class="n">example</i> namespace, and parse the 
<i class="t">example</i> template from within it.
</p>
<h4>Finding Templates</h4>
<p>
Okay, so if you use <code>get('common/example/mytemplate')</code> in the 
program, or 
<code>`ss()`<i class="t">common/example/mytemplate()</i>`es()`</code> 
in a template, 
Garden needs to determine what you are looking for. 
In the case above, it could be one of two things:
</p>
<ol>
<li>The <i class="t">mytemplate</i> template in the <i class="n">common/example/mytemplate</i> namespace.</li>
<li>The <i class="t">mytemplate</i> template in the <i class="n">common/example</i> namespace.</li>
</ol>
<p>
Well, first we look for a namespace with the given name, so if
<i class="n">./templates/common/example/mytemplate.tmpl</i> exists, 
we will return the <i class="t">mytemplate</i> template from that namespace.
</p>
<p>
If it does not exist, then we see if 
<i class="n">./templates/common/example.tmpl</i> exists,
and if it does, we return the 
<i class="t">mytemplate</i> template from that namespace.
</p>
<p>
All of this is fairly simple so far, except in the case where you have more
than one search path. In that case, the above tests are repeated in order
for each path. More specific paths must be at the top of the search path
list. So, as an example, given your search folders are:
</p>
<ol>
<li><i>./templates/advanced</i></li>
<li><i>./templates/default</i></li>
</ol>
<p>
And you request <i class="t">common/example/mytemplate</i>, 
the following order will be used to find the namespace for 
the <i class="t">mytemplate</i> template:
</p>
<ol>
<li><i class="t">./templates/advanced/common/example/mytemplate.tmpl</i></li>
<li><i class="t">./templates/advanced/common/example.tmpl</i></li>
<li><i class="t">./templates/default/common/example/mytemplate.tmpl</i></li>
<li><i class="t">./templates/default/common/example.tmpl</i></li>
</ol>
}}

