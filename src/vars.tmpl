import "common" :export

content () {{
<p>
The most fundamental part of any template language, is the ability to
replace specific identifiers with data provided by the application.
As these identifiers represent variable data, we call them variables.
</p>
<p>
In Garden, a variable can point to a number of different things, and the
order in which they are searched is important, as the first matching
variable overrides any with the same name in a later search location.
</p>
<ol>
<li>Variables defined within the template itself (aliases.)</li>
<li>Special variables specific to the current template context.</li>
<li>One of the named parameters sent to the template.</li>
<li>A definition within a Dictionary object.</li>
<li>Other variables added by extensions.</li>
</ol>
<p>
Typically a variable will contain a single value, such as a string, or
a number, but Garden also supports lists (arrays) and maps (hashes), although
they may be more useful in template application (see Recursive Templates.)
</p>
<p>
The basic usage for a variable containing a single value is:
</p>
<code class="block">
`ss()`<i class="v">variablename</i>`es()`
</code>
`custTwo(start=syntax.ss, end=syntax.es)`
<p>
This will replace <i class="v">variablename</i> with whatever content
that variable contains.
</p>
<h4>Simple list expansion</h4>
<p>
If you have a simple list variable, and wish to just join the elements
together with a separator, that's also easy using the <i class="f">sep</i>
option:
</p>
<code class="block">
`ss()`<i class="v">arrayvar</i>; <i class="f">sep</i>=", "`es()`
</code>
<p>
In this example, all of the elements of the <i class="v">arrayvar</i>
variable will be joined together with ", ". For more advanced use of
lists/arrays and maps/hashes, see the Recursive Templates section.
</p>
<h4>Variable members</h4>
<p>
If a variable is a map/hash or object, it can contain named <em>members</em>,
which you can access with a dot.
</p>
<code class="block">
`ss()`<i class="v">objvar.member.nested</i>`es()`
</code>
<h4>Variable method calls</h4>
<p>
Some members may actually be method calls, in which case you need to be
able to specify parameters for the methods. Member method call parameters can 
be either positional or named:
</p>
<code class="block">
`ss()`<i class="v">objvar.myMethod</i>(<i class="v">posparam</i>, <i class="v">namedparam</i>=<i class="v">localvar</i>)`es()`
</code>
<p>
In the above example, the <code>myMethod()</code> method on the
<i class="v">objvar</i> object will be called with its first positional
parameter being set to the value of the <i class="v">posparam</i>
variable, and a named parameter of <i class="v">namedparam</i> being
set to the value of the <i class="v">localvar</i> variable.
</p>
<p>
The parameters can also be the output of templates. See the Nested Templates
section for more details on how to call a template.
</p>
<h4>Indirect member access</h4>
<p>
Sometimes you want to access a member based on a variable. In this case
you will use indirect member access.
</p>
<code class="block">
`ss()`<i class="v">objvar</i>.`si()`<i class="v">membername</i>`ei()``es()`
</code>
<p>
In this example, you have a variable called 
<i class="v">membername</i> which will
contain the name of the member you want to get from the
<i class="v">objvar</i> variable. So if <i class="v">membername</i> was
set to "<em>id</em>", then the <i class="v">objvar.id</i> member would be
returned.
</p>
<p>
Indirect members can be nested within large path statements such as:
</p>
<code class="block">
`ss()`<i class="v">objvar</i>.`si()`<i class="v">what</i>`ei()`.<i class="var">name</i>`es()`
</code>
`custTwo(start=syntax.si, end=syntax.ei)`
}}

